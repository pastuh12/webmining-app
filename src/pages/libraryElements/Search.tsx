import React from 'react';
import { pageGeneralStyles } from '../../styles/pages';
import { Box } from '@mui/material';

const Search: React.FC = () => {
  return (
    <Box sx={pageGeneralStyles}>
      <h1>
        Исследование возможности разбиения системы управления учебным процессом
        на микросервисы
      </h1>
      <div>
        <b>Авторы: </b>Тарасов И.А., Полетайкин А.Н.
      </div>
      <div>
        {' '}
        <b>Источник:</b> Прикладная математика: современные проблемы математики,
        информатики и моделирования: Мат. VI Всеросс. науч.-практ. конф.
        Краснодар, 2024 Изд-во: Краснодарский ЦНТИ - филиал ФГБУ "РЭА" Минэнерго
        России. Краснодар, 2024. С. 125-129.
      </div>
      <div>
        <h3>Аннотация</h3>
        <p>
          В статье освещается ключевая роль правильной организации структуры и
          взаимодействий сервисов в разрабатываемой информационной системе с
          использованием микросервисной архитектуры. Основное внимание уделяется
          методу предметно-ориентированного проектирования, который позволяет
          определить границы микросервисов, обеспечивая эффективное
          взаимодействие в рамках системы на основе трех основных концепций:
          сокрытие информации, связность и связанность.
        </p>

        <p>
          Современный вуз остро нуждается в высокоэффективной автоматизированной
          системе управления образовательным процессом. Большинство вузов
          реализуют так называемую лоскутную автоматизацию, эффективность
          которой крайне низкая, и даже формирование интегрированной системы не
          решает всех проблем, среди которых важное место занимает низкая
          гибкость в различных аспектах: организационном, техническом,
          масштабируемости и надёжности. Комплексное решение этих проблем
          видится в построении автоматизированной системе с микросервисной
          архитектурой.
        </p>

        <p>
          Для того чтобы разрабатываемая информационная система смогла
          использовать преимущества микросервисной архитектуры, необходимо в
          начале разработки правильно организовать структуру и способы
          взаимодействия сервисов. Построение дизайна системы и определение
          границ микросервисов является одним из важнейших этапов реализации
          микросервисной архитектуры, требующий хорошего понимания решаемых
          бизнес процессов, используемых потоков данных для каждого сервиса. При
          этом важно помнить о трех основных концепциях: сокрытие информации,
          связность и связанность [1]. Рассмотрим их подробно.
        </p>

        <p>
          Сокрытие информации. Заключается в том, что каждый микросервис
          скрывает как можно больше деталей реализации своей работы от других
          микросервисов. Следуя этой концепции, можно снизить количество связей
          между сервисами, тем самым сделать возможным их независимое
          развертывание и повышения гибкости, понятности и скорости разработки.
        </p>

        <p>
          Связность. При проектировании микросервисов важно помнить, что
          архитектура должна упростить выполнение преобразований
          бизнес-функциональности в системе. Главная её идея в том, что
          реализация функциональности должна быть сгруппирована таким образом,
          чтобы при необходимости внести в неё изменения было затронуто как
          можно меньше других реализационных аспектов системы. Если некоторая
          функциональность распределена по всей системе, это означает слабую
          связность. [2]
        </p>

        <p>
          Связанность. Если при изменении в одном сервисе необходимо внести
          исправления в другие сервисы, то в таком случае говорится, что
          связанность сильная. При разработке микросервисов связанность должна
          быть низкой.
        </p>

        <p>
          В данной статье будет рассмотрен метод, основанный на
          предметно-ориентированном проектировании (DDD – domain-driven design).
        </p>

        <p>
          Предметно-ориентированное проектирование состоит из большого
          количества концепций и понятий, но для определения границ
          микросервисов важно знать о трех принципах: единый язык, агрегаты,
          контекст [3].
        </p>

        <p>
          Единый язык – улучшения коммуникации между командой разработки и
          пользователями системы, а также упрощения моделирования предметной
          области, можно добиться, если в разработке будут использоваться
          термины и понятия, употребляемые в реальной жизни реализуемой
          предметной области.
        </p>

        <p>
          Агрегаты – агрегатом можно назвать одну сущность или понятие из
          реальной предметной области. Жизненный цикл такого агрегата можно
          представить в виде конечного автомата.
        </p>

        <p>
          Ограниченный контекст – ограниченный контекст представляет собой более
          широкую организационную границу, в рамках которой выполнять чёткие
          обязанности. Один ограниченный контекст может содержать несколько
          агрегатов.
        </p>

        <p>
          Разбиения системы управления учебным процессом в вузе на микросервисы
          требует тщательного анализа этого процесса и его декомпозиции на
          подпроцессы по функциональному признаку. Учебный процесс в вузе
          состоит из нескольких больших подпроцессов таких как:
        </p>
        <ul>
          <li>планирование образовательного процесса;</li>
          <li>предоставление образовательного контента;</li>
          <li>проведения занятий и аттестаций, согласно учебному плану;</li>
          <li>
            проектирование индивидуальной образовательной траектории студентов;
          </li>
          <li>оценивание зрелости студентов и преподавателей.</li>
        </ul>

        <p>
          На рис. 1 показана общая структура проекта, в которой прямоугольниками
          обозначены ограниченные контексты процессов предметной области а также
          дополнительные контексты:
        </p>
        <p>
          Auth – группирует в себе функциональности необходимые для
          аутентификации и авторизации пользователей в системе;
          <br />
          Users – управляет состояниями агрегатов связанных с аккаунтами
          пользователей.
        </p>

        <p>Рисунок 1 – Общее представление всей системы</p>

        <p>
          Разбив всю предметную область на ограниченные контексты, мы получили
          общую картину системы. Таким образом, на старте разработки системы
          можно вместо каждого ограниченного контекста реализовать один большой
          сервис, а в будущем постепенно разбивать его на микросервисы без
          опасений, что такие изменения затронут другие части системы, то есть
          система будет с низкой связанностью.
        </p>

        <p>
          При подробном рассмотрении процессов проходящих внутри одного
          ограниченного контекста в нём можно будет выделить контексты поменьше
          и, если это будет необходимо, выделить их в отдельные сервисы [3]. На
          рис. 2 представлен пример такого процесса для ограниченного контекста
          Maturity Assessment.
        </p>

        <p>
          Рисунок 2 – Пример определение вложенных контекстов в контексте
          Maturity assessment
        </p>

        <h3>Библиографический список</h3>
        <p>
          1. Осипов Д.Б. Проектирование программного обеспечения с помощью
          микросервисной архитектуры // Вестник науки и образования: сборник
          статей, т.2, 2018. [Электронный ресурс] - URL:
          https://cyberleninka.ru/article/n/proektirovanie-programmnogo-obespecheniya-s-pomoschyu-mikroservisnoy-arhitektury/viewer
          (дата обращения 10.01.2024).
        </p>
        <p>
          2. Сэм Ньюмен, Создание микросервисов. 2-е изд. — СПб.: Питер, 2023.
          624 с.
        </p>
        <p>
          3. Царегородцев А.А. Использование микросервисной архитектуры при
          реализации электронной информационно-образовательной среды : научная
          статья — ФГБОУВО «МГТУ им. Г.И. Носова», г. Магнитогорск, [Электронный
          ресурс] URL:
          https://elar.rsvpu.ru/bitstream/123456789/18022/1/978-5-8295-0500-4_2017_028.pdf
          (дата обращения: 28.12.2023).
        </p>
      </div>
    </Box>
  );
};

export default Search;
