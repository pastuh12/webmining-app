import { Box } from '@mui/material';
import React from 'react';
import { pageGeneralStyles } from '../styles/pages';
import { Header } from '../components/Header';

const Report: React.FC = () => {
  return (
    <Box sx={pageGeneralStyles}>
      <Header />
      <h1>Реферат</h1>
      <h3>Содержание</h3>
      <p>
        <ol>
          <li>
            <a href="#start">Введение</a>
          </li>
          <li>
            <a href="#actual">Актуальной поставленной задачи</a>
          </li>
          <li>
            <a href="#recommendations">
              Правила и рекомендации, способствующие правильному построению
              микросервисной архитектуры
            </a>
          </li>
          <li>
            <a href="#schema">
              Схема и описание микросервисной архитектуры информационной системы
              управления образовательным процессом
            </a>
          </li>
          <li>
            <a href="#safety">Безопасность, аутентификация и авторизация</a>
          </li>
          <li>
            <a href="#services">Взаимодействие сервисов друг с другом</a>
          </li>
          <li>
            <a href="#opportunities">Возможности для улучшения системы</a>
          </li>
          <li>
            <a href="#end">Заключение</a>
          </li>
          <li>
            <a href="#links">Список используемых источников</a>
          </li>
        </ol>
      </p>
      <div id="start">
        <h3>Введение</h3>
        <p>
          Построение микросервисной архитектуры (МСА) с нуля, которая обладает
          наибольшим количеством преимуществ микросервисов, является
          нетривиальной задачей. Для проектирование такой архитектуры требуется
          провести тщательный анализ и планирование. Необходимо определить
          границы сервисов, чтобы минимизировать взаимозависимости и обеспечить
          автономность каждого микросервиса. Это сложная задача, так как
          неправильное определение границ может привести к значительным
          проблемам в будущем.
        </p>
        <p>
          Управление данными в микросервисной архитектуре также представляет
          собой вызов. Данные часто распределены между различными сервисами, что
          требует разработки стратегий для управления согласованностью данных,
          транзакциями и целостностью данных. Взаимодействие микросервисов через
          сеть может привести к увеличению задержек и необходимости управления
          сетевой безопасностью, балансировкой нагрузки и отказоустойчивостью.
        </p>
        <p>
          Обеспечение безопасности в микросервисной архитектуре требует
          дополнительных мер, таких как аутентификация и авторизация на уровне
          сервисов, шифрование данных в транзите и на хранении, а также
          управление секретами. Тестирование микросервисов сложнее, чем
          монолитных приложений, так как необходимо тестировать как отдельные
          сервисы, так и их взаимодействие друг с другом. Это требует
          использования различных подходов, таких как контрактное тестирование и
          интеграционное тестирование.
        </p>
      </div>
      <div id="actual">
        <h3>Актуальной поставленной задачи</h3>
        <p>
          Обычно системы управления образовательным процессом позволяет упросить
          выполнения сложных процессов таких как: управление данными субъектов
          образовательной деятельности, управления контентом и его анализ,
          проектирования индивидуальной образовательной траектории, планирования
          образовательного процесса, реализация образовательного процесса и его
          контроль.
        </p>
        <p>
          Система такой сложности, реализованная не на микросервисной
          архитектуре, сталкивается с рядом значительных проблем, которые могут
          существенно влиять на её эффективность и гибкость. Одной из основных
          проблем является монолитность системы, которая затрудняет её
          масштабирование и модернизацию. В монолитной архитектуре все
          компоненты системы тесно связаны между собой, что делает сложным
          внесение изменений или добавление новых функций без риска нарушения
          работы всей системы. Это приводит к тому, что любые обновления требуют
          значительных усилий и времени, а также тщательного тестирования, чтобы
          избежать сбоев.
        </p>
        <p>
          Кроме того, отсутствие микросервисной архитектуры ограничивает
          возможность независимого развития и развертывания отдельных
          компонентов системы. В микросервисной архитектуре каждый сервис может
          быть разработан, протестирован и развернут независимо от других, что
          позволяет быстрее реагировать на изменения и потребности
          пользователей. В монолитной системе любое изменение требует
          координации между различными командами разработчиков, что замедляет
          процесс и увеличивает вероятность ошибок.
        </p>
        <p>
          Ещё одной проблемой является сложность масштабирования системы. В
          микросервисной архитектуре можно масштабировать только те компоненты,
          которые действительно нуждаются в дополнительных ресурсах, тогда как в
          монолитной системе приходится масштабировать всю систему целиком. Это
          приводит к неэффективному использованию ресурсов и увеличению затрат
          на инфраструктуру. Кроме того, микросервисы позволяют использовать
          различные технологии и языки программирования для разных компонентов,
          что даёт возможность выбирать оптимальные инструменты для решения
          конкретных задач. В монолитной системе все компоненты должны быть
          написаны на одном языке и использовать одну технологическую платформу,
          что ограничивает гибкость и возможности оптимизации.
        </p>
        <p>
          Таким образом, если при проектировании системы управления
          образовательным процессом использовать принципы микросервисной
          архитектуры, то дальнейшее ее развитие и поддержка будет происходить
          быстрее и проще.
        </p>
      </div>
      <div id="recommendations">
        <h3>
          Правила и рекомендации, способствующие правильному построению
          микросервисной архитектуры
        </h3>
        <p>
          При построении микросервисной архитектуры важно знать и применять
          несколько правил, которые позволят в процессе конструирования не
          лишиться преимуществ, получаемых от микросервисов [1].
          <ul>
            <li>
              Разделение контекстов по конкретным бизнес-задачам: каждый
              микросервис должен отвечать за отдельную бизнес-функцию, что
              помогает минимизировать взаимозависимости и облегчает управление
              сервисами, обеспечивая их автономность и независимость. Это
              означает, что каждый сервис должен иметь свои собственные данные и
              не зависеть от других сервисов для выполнения своих задач.
            </li>
            <li>
              Взаимодействие сервисов происходит по заданным интерфейсам: это
              позволяет легко заменять или обновлять сервисы без нарушения
              работы всей системы.
            </li>
            <li>
              Децентрализованное управление данными: каждый микросервис должен
              управлять своими собственными данными, что помогает избежать узких
              мест и улучшает масштабируемость системы.
            </li>
            <li>
              Обеспечение безопасности на уровне каждого микросервиса: каждый
              сервис должен отвечать за сохранность своих данных. Это включает в
              себя аутентификацию, авторизацию и шифрование данных.
            </li>
          </ul>
        </p>
        <p>
          Следование этим правилам поможет создать эффективную, масштабируемую и
          устойчивую микросервисную архитектуру, которая будет легко управляться
          и развиваться.
        </p>
      </div>
      <div id="schema">
        <h3>
          Схема и описание микросервисной архитектуры информационной системы
          управления образовательным процессом
        </h3>
        <p>
          Соблюдая вышеуказанные правила, была спроектирована архитектурная
          схема информационной системы управления образовательным процессом.
          Схема показана на рисунке 1.
        </p>
        <figure
          //@ts-ignore
          align="center"
        >
          <img
            src="https://storage.yandexcloud.net/my-notes/architecture.png"
            alt="Описание изображения"
            width="300"
          />
          <figcaption>
            Рисунок 1 – Схема МСА для схема информационной системы управления
            образовательным процессом
          </figcaption>
        </figure>
        <p>
          Концепция микросервисной архитектуры для системы управления обучающим
          процессом в вузе предполагает разделение системы на отдельные
          контексты, каждый из которых отвечает за определенную бизнес-задачу.
        </p>
        <p>
          Система была разделена на следующие контексты, соответствующие
          поставленным бизнес функциональностям:
          <ul>
            <li>
              Maturity assessment: предоставляет функционал для управления
              данными о зрелости субъектов ОД (студенты и преподаватели):
              портфолио, профиль компетенций, паспорт цифровой зрелости, а также
              вуза в целом;
            </li>
            <li>
              Content management: реализует разработанный сервис семантического
              анализа образовательного контента. Предоставляет возможности для
              внесения, real-time мониторинга качества и актуализации
              образовательного контента в структурированном виде;
            </li>
            <li>
              Designing individual educational trajectory: c помощью этого
              сервиса обучающийся при поддержке куратора и с использованием
              предложенных образовательных ресурсов может конструировать свою
              индивидуальную образовательную траекторию;
            </li>
            <li>
              Planning educational process: отвечает за планирование и
              построение учебного графика образовательного процесса в групповом
              и индивидуальном, синхронном и асинхронном, on-line и on-campus, а
              также смешанном формате сообразно потребностям и возможностям
              субъектов ОД и с учетом ИОТ обучающихся;
            </li>
            <li>
              Education content delivery: отвечает за реализацию
              образовательного процесса, в том числе проведение всех видов
              контроля и аттестации (ассесмента), согласно выработанному
              учебному графику.
            </li>
          </ul>
        </p>
        <p>
          Это позволяет каждой команде разработчиков сосредоточиться на своей
          области ответственности. Это повышает эффективность разработки и
          упрощает внедрение новых функций и обновлений. Каждый микросервис
          может быть масштабирован независимо от других, что позволяет
          эффективно распределять ресурсы и управлять нагрузкой [2].
        </p>
        <p>
          Сервис Auth отвечает за механизмы аутентификации и авторизации. Сервис
          Users хранит и управляет пользовательскими данными.
        </p>
      </div>
      <div id="safety">
        <h3>Безопасность, аутентификация и авторизация</h3>
        <p>
          В рассматриваемой системе ключевыми компонентами отвечающими за
          аутентификацию и авторизацию сервисы Auth и Users, которые отделены от
          остальных микросервисов. Такое разбиение позволяет достичь высокой
          гибкости и масштабируемости системы, а также улучшить управляемость и
          безопасность.
        </p>
        <p>
          Сервис Auth является единой точкой авторизации для всех клиентских
          запросов. Он отвечает за проверку подлинности пользователей, например,
          с помощью выдачи токенов доступа (JWT), которые затем используются для
          аутентификации и авторизации запросов к другим микросервисам.
          Отделение Auth от остальных сервисов позволяет централизовать
          управление безопасностью и упростить обновление механизмов
          аутентификации и авторизации, такие как Keyclock. Это также снижает
          нагрузку на другие микросервисы, освобождая их от необходимости
          самостоятельно обрабатывать аутентификацию.
        </p>
        <p>
          Сервис Users отвечает за управление пользователями, их регистрацией,
          обновлением данных и удалением. Отделение Users от других
          микросервисов позволяет централизовать управление данными
          пользователей и обеспечить их целостность и безопасность. Это также
          упрощает интеграцию с внешними системами и сервисами, такими как LDAP
          или Active Directory, для синхронизации данных пользователей.
        </p>
      </div>
      <div id="services">
        <h3>Взаимодействие сервисов друг с другом</h3>
        <p>
          В данной системе микросервисы будут взаимодействовать друг с другом с
          помощью REST API. REST API является простым и широко распространенным
          способом обмена данными между сервисами. Он обеспечивает гибкость и
          совместимость, а также легко интегрируется с различными клиентами и
          системами [3].
        </p>
        <p>
          Конечно же, этот способ общения сервисов имеет свои недостатки, такие
          как необходимость обработки большого количества сетевых запросов и
          возможные задержки при передаче данных, повышение связанности
          сервисов, что приводит к сбоям при выполнении задачи, если REST запрос
          к другому сервису завершается с ошибкой.
        </p>
        <p>
          Тем не менее, если система реализуется маленькой командой или на
          разработка выделен небольшой промежуток времени, то REST API является
          наиболее приемлемым вариантом, так как он проще в реализации и
          поддержке по сравнению с другими способами взаимодействия, такими как
          gRPC или асинхронные очереди сообщений.
        </p>
        <p>
          Стоит упомянуть, что, когда система будет готова – сможет выполнять
          поставленные задачи, можно будет частично или в некоторых частях
          системы изменить способ взаимодействия сервисов для повышения
          производительности и устойчивости.
        </p>
      </div>
      <div id="opportunities">
        <h3>Возможности для улучшения системы</h3>
        <p>
          Конечно же, данная представленная система со временем может быть
          улучшена, добавив современные технологии и подходы для ее улучшения.
        </p>
        <p>
          Использование сервисной сетки, такой как Istio, может значительно
          улучшить управление сетевыми взаимодействиями между микросервисами.
          Istio предоставляет функции для автоматического балансирования
          нагрузки, управления трафиком, мониторинга, трассировки и обеспечения
          безопасности. Это позволяет централизованно управлять политиками
          безопасности и контролировать сетевые взаимодействия, что упрощает
          поддержку и масштабирование системы [4].
        </p>
        <p>
          Внедрение асинхронного обмена сообщениями с помощью таких систем, как
          Apache Kafka или RabbitMQ, позволяет микросервисам взаимодействовать
          друг с другом без необходимости синхронного ожидания ответов. Это
          улучшает производительность и отказоустойчивость системы, так как
          микросервисы могут продолжать работу, даже если один из них временно
          недоступен. Асинхронный обмен сообщениями также упрощает обработку
          больших объемов данных и событий [1].
        </p>
        <p>
          Внедрение систем мониторинга и логирования, таких как Prometheus и
          Grafana, позволяет отслеживать состояние и производительность
          микросервисов в реальном времени. Это помогает быстро выявлять и
          устранять проблемы, а также оптимизировать работу системы.
          Использование ELK Stack (Elasticsearch, Logstash, Kibana) для
          централизованного сбора, анализа и визуализации логов упрощает отладку
          и анализ проблем, а также позволяет отслеживать безопасность и
          соответствие требованиям.
        </p>
        <p>
          Внедрение систем управления секретами, таких как HashiCorp Vault или
          AWS Secrets Manager, для безопасного хранения и управления
          конфиденциальной информацией, такой как ключи и пароли, также повышает
          безопасность системы.
        </p>
        <p>
          Внедрение этих технологий и подходов может значительно улучшить
          систему управления обучающим процессом в вузе, повысив её
          производительность, безопасность, масштабируемость и управляемость.
          Однако, для одного разработчика это может быть слишком сложной задачей
          из-за необходимости настройки и поддержки множества компонентов и
          инструментов. Поэтому, несмотря на возможные улучшения, целесообразно
          придерживаться более простой архитектуры с использованием REST API и
          централизованного управления аутентификацией и авторизацией, что
          позволит упростить разработку и поддержку системы.
        </p>
        <p>
          Перед использованием этих или других технологий при планировании и
          реализации системы, важно определить наличие достаточного количества
          ресурсов для их внедрения, сравнить получаемую пользу и
          увеличивающуюся сложность конечного продукта.
        </p>
      </div>
      <div id="end">
        <h3>Заключение</h3>
        <p>
          Предложенная микросервисная архитектура для системы управления
          обучающим процессом в вузе обеспечивает высокую гибкость,
          масштабируемость и управляемость. Отделение сервисов Auth и Users от
          остальных микросервисов позволяет централизовать управление
          безопасностью и данными пользователей, что повышает надежность и
          безопасность системы.
        </p>
        <p>
          Использование REST API для взаимодействия между микросервисами
          является оптимальным выбором для старта проекта или его реализации в
          маленькой команде, так как он обеспечивает простоту реализации и
          поддержки. Несмотря на возможные улучшения, такие как внедрение
          сервисной сетки или асинхронного обмена сообщениями, от их
          использования целесообразно отказаться из-за их сложности и
          необходимости значительных усилий для настройки и поддержки.
        </p>
      </div>
      <div>
        <h3 id="links">СПИСОК ИСПОЛЬЗУЕМЫХ ИСТОЧНИКОВ</h3>
        <p>
          <ol>
            <li>
              Ньюмен С., Создание микросервисов,. 2-е изд. СПб.: Питер, 2023. —
              624 с;
            </li>
            <li>
              Иванов, Л. А. Использование микросервисной архитектуры при
              реализации информационной системы для оптимизации работы патрулей
              / Л. А. Иванов // Современные технологии в науке и образовании -
              СТНО-2021 : Сборник трудов IV Международного научно-технического
              форума: в 10 т., Рязань, 03–05 марта 2021 года. Том 4. – Рязань:
              Рязанский государственный радиотехнический университет имени
              В.Ф.Уткина, 2021. – С. 45-48. – EDN YRKLJR.;
            </li>
            <li>
              3. Осипов, Д. Б. Проектирование программного обеспечения с помощью
              микросервисной архитектуры / Д. Б. Осипов // Вестник науки и
              образования. – 2018. – Т. 2, № 5(41). – С. 41-46. – EDN XNMTFJ;
            </li>
            <li>
              Гольчевский, Ю. В. Актуальность использования микросервисов при
              разработке информационных систем / Ю. В. Гольчевский, А. В.
              Ермоленко // Вестник Сыктывкарского университета. Серия 1:
              Математика. Механика. Информатика. – 2020. – № 2(35). – С. 25-36.
              – EDN MYITJK.;
            </li>
          </ol>
        </p>
      </div>
    </Box>
  );
};

export default Report;
